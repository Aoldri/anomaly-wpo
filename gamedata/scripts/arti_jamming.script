local ini_parts   = itms_manager.ini_parts
gc = game.translate_string
math_random = math.random
math_floor = math.floor
local jammin = sound_object("jammin")
local gun_sounds = {}
local overheat_data = {}
-- associate jammed guns to type of jam
local jammed_guns 	= {}
--[[
	properties:
	id: id of current weapon, if applicable
	has_parts: if weapon has parts or not, determines if rest is filled in
	parts: map of part_name -> condition, same as item_parts, minus barrel
	part_names: list of part names, these are the mechanism parts only. we will take the other parts as needed
	barrel_name: name of barrel in weapon, for barrel specific calculation
	barrel_con: cond of barrel in weapon
	trigger_name: name of trigger
]]
local cgd = {}

-- under this condition shooting gun might damage part
local DAMAGE_THRESHOLD = 86
-- condition under which parts cannot be field replaced
local REPLACE_THRESHOLD = 0.2
-- formula for jam: JAM_COEF * (JAM_FACTOR ^ 2 - SEVERITY), where SEVERITY = math_floor(part_condition/20)
-- 0.4, 3, 6, 12, 24
-- 0.1, 1, 2, 4, 8
local TRIGGER_JAM = {10, 2}
local PARTS_JAM = {30, 2}
local guarantee_not_jam = true
local SALE_PART_MIN = 51
-- use to block inputs while animations / unjam logic fires
local unjam_in_progress = false

get_config = a_arti_jamming_mcm.get_config

d_flag      		= false
local d_key       	= "DIK_LMENU" -- Saftey key hold (Left Alt)

-------------------
-- SECTION utils --
-------------------

function print_dbg(txt, ...)
	local enable_debug = get_config("debug") or false
	if enable_debug then
		printf("arti_jamming | %s | " .. txt, time_global(), ...)
	end
end

function send_msg(msg, verbosity)
	verbosity = verbosity or 1
	local v = get_config("verbosity") or 1
	if (v >= verbosity) then
		actor_menu.set_msg(1, msg,3)
	end
end

-- export function
function get_jammed(id)
	return jammed_guns[id]
end

function set_jam_status(id, status)
	jammed_guns[id] = status
end

local can_swear = true

--gun jam play swearing sound
function jam_swearing()
	local timeout = get_config("profanity_timeout")
	if timeout and not can_swear then return end
	if get_config("profanity") and math_random(1,100) > 50 then
		local lang = get_config("profanity_language") or "rus"
		utils_obj.play_sound("cutscenes\\"..lang.."\\gun_jam_"..math_random(1,7), 1 )
		if timeout then
			can_swear = false
			CreateTimeEvent("wpo", "reset_swear", 2, reset_swear)
		end
    end
end

function reset_swear()
	can_swear = true
	return true
end

function start_jammin(chance)
	local fun_level = get_config("fun")
	fun_level = tonumber(fun_level)
	print_dbg("fun level: %s", fun_level)
	if fun_level == 0 then 
		print_dbg("no fun allowed")
		return 
	end
	if fun_level == 2 then 
		print_dbg("more fun allowed")
		chance = chance * 2 
	end
	if not jammin:playing() and math.random(100) <= chance then
		jammin.volume = 1
		jammin:play(db.actor, 0, sound_object.s2d)
	end
end

function stop_jammin()
	if jammin:playing() then
		jammin:stop()
	end
end

function is_part(part)
	return IsItem("part", part)
end

function is_barrel(part)
	return is_part(part) and string.find(part, "barrel")
end
function is_trigger(part)
	return is_part(part) and string.find(part, "trigger")
end

function get_parts_list(wpn)
	
	if wpn and IsWeapon(wpn) and (not IsMelee(wpn)) then
		local sec = ini_sys:r_string_ex(wpn:section(),"parent_section") or wpn:section()
		local parts = ini_parts:r_string_ex("con_parts_list", sec)
		return parts
	else 
		return nil
	end
end

-- true if item is a firearm with parts
function has_parts(wpn)
	return get_parts_list(wpn) ~= nil
end


function missing_parts(wpn)
	if wpn:id() == cgd.id then
		if cgd.barrel_con == -1 then return true end
		for k,v in pairs(cgd.parts) do
			if v == -1 then return true end
		end
	else
		local parts = item_parts.get_parts_con(wpn, nil, true)
		for k,v in pairs(parts) do
			if is_part(k) and v == -1 then return true end
		end
	end
	return false
end


function play_anim(weapon, anim, sound)
	local length = weapon:play_hud_motion(anim, true, 0, 1, 0)
	print_dbg("playing animation %s for %s time", anim, length)
	if sound then
		utils_obj.play_sound(sound)
	end				
	return length
	-- CreateTimeEvent("arti_jamming", "restore", length/1000, unset)
end


function persist_current_weapon()
	if cgd.id and cgd.has_parts then
		local saved_parts = se_load_var(cgd.id, nil, "parts")
		for k,v in pairs(cgd.parts) do
			saved_parts[k] = v
		end
		saved_parts[cgd.barrel_name] = cgd.barrel_con
		item_parts.set_parts_con(cgd.id, saved_parts)
		print_dbg("Persisted parts for weapon %s", cgd.id)
	end
end

function current_id()
	return cgd.id
end
function reset_cgd()
	clear_cgd()
	update_current()
end
----------------------------
-- SECTION main functions --
----------------------------

local function actor_on_update()
	-- overheat checks
	if cgd.heat ~= nil and db.actor:active_item() and cgd.has_parts then
		manage_overheat(db.actor:active_item())
	end
end

function actor_on_first_update()
	update_current()
end

function clear_cgd()
	empty_table(cgd.parts)
	empty_table(cgd)
	cgd.id = nil
	cgd.has_parts = false
	cgd.fullAuto = false
end


-- update current gun to be gun in hand
function update_current()
	
	local gun = db.actor:active_item()
	if not gun then return end
	if gun:id() == cgd.id then return end

	if gun and gun:id() ~= cgd.id then
		if not has_parts(gun) then
			clear_cgd()
			cgd.id = gun:id()
			print_dbg("Current gun (no parts) changed to %s (%s)", cgd.id, gun:section())
		else
			cgd.id = gun:id()
			cgd.has_parts = true
			print_dbg("Current gun changed to %s (%s)", cgd.id, gun:section())
			cgd.current_gun_shot_dec = gun:section() and ini_sys:r_string_ex(gun:section(),"condition_shot_dec")  or 0.0005
			local fire_modes = SYS_GetParam(0, gun:section(), "fire_modes") or "1"
			local fire_table = invert_table(str_explode(fire_modes, ","))
			cgd.fullAuto = fire_table["-1"] ~= nil
			cgd.parts = {}
			cgd.heat = 0
			local saved_parts = item_parts.get_parts_con(gun, nil, true)
			for k, v in pairs(saved_parts) do
				print_dbg("Part: %s, condition of part: %s", k, v)
				if is_trigger(k) then
					cgd.trigger_name = k
				end
				if is_barrel(k) then
					cgd.barrel_con = v
					cgd.barrel_name = k
				elseif is_part(k) then
					cgd.parts[k] = v
				end
			end
		end
	end
end

-- individually calculate jam based on weapon parts, and jam the weapon if applicable
-- Average jam chance based on damage level of each component.
local function calculate_jam(wpn, old_ammo)
	if guarantee_not_jam then
		return
	end
	local count = 0
	local mechanism_cond = #cgd.parts
	for k, v in pairs(cgd.parts) do -- skip barrel
		local severity = math_floor(v / 20)
		if (severity < 4) then
			mechanism_cond = mechanism_cond + (PARTS_JAM[1] * math.pow(PARTS_JAM[2], 3 - severity))
		end
		-- print_dbg("Part: [%s], cond: [%s], severity: [%s], sum jam chance: [%s]", k,v, severity, mechanism_cond) 
		count = count + 1
	end

	-- jam chance. if we roll this twice, upgraded to severe jam
	local jam_chance = math_floor(mechanism_cond/count) or 0
	if cgd.fullAuto then jam_chance = jam_chance / 2 end
	jam_chance = jam_chance * get_config("jamchance")
	jam_chance = jam_chance * get_overheat_modifier(wpn)
	-- also apply condition
	local cond = wpn:condition()
	if cond < 0.9 then
		local ratio = (0.9-cond)/0.45
		jam_chance = jam_chance * (1 + ratio)
		-- print_dbg("Increasing jam ratio by %s", ratio)
	end
	if (old_ammo) then
		-- bad ammo adds a flat 2% chance to jam
		jam_chance = jam_chance + 20
	end
	-- print_dbg("Final jam chance is %s", jam_chance)

	if (math_random(1000) <= jam_chance) then
		local str = gc("ui_st_jam")
		local verbosity = 1
		if wpn:get_ammo_in_magazine() > 0 and get_config("superjam") and (math_random(1000) < jam_chance/2) then
			jammed_guns[wpn:id()] = 3
			print_dbg("Severe jam")
			if get_config("verbosity") > 1 then
				str = gc("ui_st_superjam")
			end
		else
			jammed_guns[wpn:id()] = 2
			-- print_dbg("Normal jam")
		end
		start_jammin(2)
		send_msg(str, verbosity)
	end
end

-- Randomly damage 1 part of the weapon by DAMAGE, skipping barrels
local function damage_part(wpn)
	local to_damage = random_key_table(cgd.parts)
	local part_con = cgd.parts[to_damage]
	local damage = math_random(5, 12)
	cgd.parts[to_damage] = part_con > damage and (part_con - damage) or 1

	-- print_dbg("%s damaged to %s condition", to_damage, cgd.parts[to_damage])
	if (get_config("verbosity") > 1) then
		news_manager.send_tip(db.actor, gc("ui_st_parts_damage"), nil, "swiss_knife", 6000)
	end
	-- play a sound?
end

-- Calculate chance to damage based on weapon condition
local function calculate_damage(wpn, old_ammo, heat)
	local cond = wpn and math_floor(wpn:condition()*100) or 100
	local damaged = false
	local roll = math_random(1000)
	local damage_chance = old_ammo and 6 or 2
	local threshold = get_config("threshold") or 85
	local overheat_modifier = get_overheat_modifier(wpn)
	-- print_dbg("weapon %s, heat is %s. heat modifier is  %s", wpn:section(), cgd.heat, overheat_modifier)
	if (cond < threshold) then
		-- 200 x (threshold - condition) * per shot decrease, should result in pretty small chances
		damage_chance = (threshold - cond) * cgd.current_gun_shot_dec * 2000 * overheat_modifier
		-- if cgd.fullAuto then damage_chance = damage_chance / 2 end
		-- damage_chance = (170 - 200*cond) * cgd.current_gun_shot_dec * 1000
		-- add flat 2% chance of damage w. old ammo
		if old_ammo then damage_chance = damage_chance + 20 end
		-- print_dbg("Damage chance: %s. Condition: %s", damage_chance, cond)
	end

	if (roll < damage_chance) then
		damage_part(wpn)
		damaged = true
	end
	-- base 2% chance to wear barrel by 1, doubled with old ammo
	local barrel_wear = old_ammo and 40 or 20
	barrel_wear = barrel_wear * overheat_modifier
	if (roll < barrel_wear) then
		-- print_dbg("Damaged barrel")
		cgd.barrel_con = cgd.barrel_con > 0 and cgd.barrel_con - 1 or 0
		damaged = true
	end
	
	if damaged then 
		persist_current_weapon()
	end
end

-- overheat support, hot hot hot

local time_quant
local decrease_quant
local heat_per_shot = 10
-- this should only be invoked if the weapon can be overheated
function manage_overheat(wpn)
	-- ignore if not current (somehow)
	if not wpn or wpn:id() ~= cgd.id then return end
	local overheat_base = get_overheat_base(wpn) or 50
	local overheat_threshold = overheat_base * 2
	local overheat_max = (overheat_base * 3) + 10
	if cgd.heat < overheat_threshold then
		decrease_quant = 0.15
	else
		decrease_quant = 0.05
	end

	local sec = wpn:section()
	if not wpn then return end
	if (string.match(tostring(sec),"knife") or string.match(tostring(sec),"axe")) then return end
	
	if IsWeapon(wpn) then
		local rpm = ui_wpn_params.GetRPM(wpn:section())
		-- Grab packet data
		local se_wpn = alife_object(wpn:id())
		local data = utils_stpk.get_weapon_data(se_wpn)

		if not data then return end
		
		--printf("RPM: "..rpm)
		time_quant = rpm/100
		if cgd.fullAuto then time_quant = time_quant / 2 end
		
		-- Check if weapon firing
		if (data.weapon_state == 5) then
			-- increase overheat quantity over time
			cgd.heat = cgd.heat + time_quant <= overheat_max and cgd.heat + time_quant or overheat_max
		else 
			-- decrease quantity over time when not shooting
			cgd.heat = cgd.heat - decrease_quant >= 0 and cgd.heat - decrease_quant or 0
		end

	end
end

-- return overheat damage modifier for current weapon, weapon itself is passed to get some convenience things
-- if you are not passing current, return just 1
-- eval returns multiplier, pass false gives just level
function get_overheat_modifier(weapon, eval)
	local id = weapon:id()
	if eval == nil then eval = true end
	if id ~= cgd.id then return 1 end
	local overheat_base = get_overheat_base(weapon) or 50
	local heat_severity = math.floor(cgd.heat/overheat_base)
	if heat_severity > 0 then 
		return eval and overheat_data.damage[heat_severity] or heat_severity
	else return eval and 1 or 0 end 
end

-- return overheat base amount (factor in section and suppressor)
function get_overheat_base(weapon)
	if not weapon then return end
	local sec = weapon:section()
	local sec_p = ini_sys:r_string_ex(sec,"parent_section") or sec
	local overheat_base = overheat_data.custom[sec_p] or overheat_data.base
	if weapon:weapon_is_silencer() then overheat_base = overheat_base * overheat_data.suppressor_mult end
	return overheat_base
end

function get_heat()
	return cgd.heat
end

local last_wpn_snd_empty = {nil, "$no_sound", 1}
local tg_snd_empty = 0
local delay_snd_empty = 300 -- ms
-- before fire - misfire, block shot if jammed with same clicky sound for zeroed weapons
local function actor_on_weapon_before_fire(flags)
	local tg = time_global()

	local obj_wpn = db.actor:active_item()
	local id = obj_wpn and obj_wpn:id() or 0

	if obj_wpn and id ~= cgd.id then
		-- populate current gun
		update_current()
	end

	if obj_wpn and id == cgd.id then
		if obj_wpn:get_ammo_in_magazine() == 0 or not cgd.has_parts or obj_wpn:weapon_in_grenade_mode() then
			return 
		end

		-- if missing parts do not roll for misfire
		if missing_parts(obj_wpn) then
			send_msg(gc("ui_st_missing"), 1)
			flags.ret_value = false
			return
		end
		-- if guarantee not jam, don't even calculate this
		if guarantee_not_jam then
			return
		end

	-- roll misfire chance
		local str = ""
		-- apply misfire
		local trigger_con = cgd.parts[cgd.trigger_name] or 99
		local severity = math_floor(trigger_con/20)
		local misfire_chance = 0
		
		if severity < 4 then 
			misfire_chance = math_floor(TRIGGER_JAM[1] * math.pow(TRIGGER_JAM[2], 3 - severity))
		end
		misfire_chance = misfire_chance * get_config("jamchance")
		local cond = obj_wpn:condition()
		if cond < 0.9 then
			local ratio = (0.9-cond)/0.9
			misfire_chance = misfire_chance * (1 + 2*ratio)
		end			
		-- print_dbg("misfire chance: "..misfire_chance)
		if (math_random(1000) < misfire_chance) then
			-- fullauto fail later
			if false then--math.random(100) < misfire_chance / 3 then
				print_dbg("aaaaaaaaa")
				level.press_action(bind_to_dik(key_bindings.kWPN_FIRE))
			else
				str = gc("ui_st_misfire")
				jammed_guns[id] = 1
			end
		end
		
		-- check for malfunction
		if jammed_guns[id] then
			local sec = obj_wpn:section()
			-- Cache
			if (sec ~= last_wpn_snd_empty[1]) then
				-- Reset
				last_wpn_snd_empty[1] = sec
				last_wpn_snd_empty[2] = "$no_sound"
				last_wpn_snd_empty[3] = 1
				
				-- Get empty sound
				local snd = ini_sys:r_string_ex(sec,"snd_empty")
				if snd and (snd ~= "") then
					snd = str_explode(snd,",")
					last_wpn_snd_empty[2] = snd[1]
					last_wpn_snd_empty[3] = snd[2] or 1
				end
			end
				--ADDED jam_swearing()
			jam_swearing()			
			start_jammin(2)
			-- Play empty clip sound
			if (last_wpn_snd_empty[2] ~= "$no_sound") and (tg > tg_snd_empty) then
				utils_obj.play_sound( last_wpn_snd_empty[2], last_wpn_snd_empty[3] or 1 )
				tg_snd_empty = tg + delay_snd_empty
			end
			if (get_config("verbosity") == 2 and jammed_guns[id] == 3) then
				str = gc("ui_st_superjam")
			else
				str = gc("ui_st_jam")
			end
			-- Don't shoot
			flags.ret_value = false
		end
		send_msg(str, 1)
	end
end

-- after fire - chance of FTE, double feed
-- if shoot success, calculate damage
local function actor_on_weapon_fired(obj, wpn, ammo_elapsed, grenade_elapsed, ammo_type, grenade_type)
	if (obj:id() ~= AC_ID) then
		return
	end
	if wpn:id() ~= cgd.id or not cgd.has_parts or wpn:get_ammo_in_magazine() == 0 or missing_parts(wpn) or wpn:weapon_in_grenade_mode() then
		return 
	end

	if guarantee_not_jam then
		guarantee_not_jam = false
	end

	-- calc and apply jam
	local wpn_obj = utils_item.item_is_fa(wpn) and wpn
	if wpn_obj then
		-- calc and apply extra degradation in rain
		local degradation_factor = 1
		if level.rain_factor() > 0.3 and not GetEvent("current_safe_cover") then
			degradation_factor = degradation_factor * (get_config("degradation") or 1.5)
		end
		degradation_factor = degradation_factor * get_overheat_modifier(wpn_obj)
		if degradation_factor > 1 then
			degradation_factor = degradation_factor - 1
			local degradation = degradation_factor * cgd.current_gun_shot_dec
			print_dbg("Degrading by additional %s", degradation)
			wpn_obj:set_condition(clamp(wpn_obj:condition() - degradation, 0, 0.999))
		end

		if jammed_guns[wpn_obj:id()] then
			level.release_action(bind_to_dik(key_bindings.kWPN_FIRE))
		end
		if (not cgd.parts or is_empty(cgd.parts)) then return 
		elseif (not jammed_guns[wpn_obj:id()]) then
			local old_ammo = wpn:get_ammo_type() % 3 ~= 0
			calculate_jam(wpn_obj, old_ammo)
			calculate_damage(wpn_obj, old_ammo)
		end
	end

end

function check_unjam(obj)
	if jammed_guns[obj:id()] then
		return true
	else return false
	end
end

function string_unjam()
	return gc("st_unjam")
end

function get_sound(sec)
	return gun_sounds[sec] and gun_sounds[sec] or "handgun"
end

-- do an unjam, optionally playing sounds and such
function apply_unjam(id, sound, message, verbosity)
	if not unjam_in_progress then 
		print_dbg("Unjam interrupted for %s", id)
		return true
	end
	unjam_in_progress = false
	if sound and sound ~= "" then
		utils_obj.play_sound(sound.."_unjam")
	end
	if message then
		send_msg(message, verbosity)
	end
	if id and id ~= 0 then
		jammed_guns[id] = nil
		guarantee_not_jam = true
	end
	return true
end

-- provide heat readout
function check_simple(weapon)
	print_dbg("Performing heat check")
	local str = gc("ui_st_functional")
	local heat_lvl = get_overheat_modifier(weapon, false)
	if heat_lvl > 0 then
		str = str .. gc("ui_st_heat"..heat_lvl)
	end
	send_msg(str, 0)		
end

-- provide heat readout + idle anim
function check_anim(weapon)
	check_simple(weapon)
	local sec = weapon:section()
	local idle_section = utils_item.addon_attached(weapon ,"gl") and (weapon:weapon_in_grenade_mode() and "anm_bore_g" or "anm_bore_w_gl") or "anm_bore"
	local hud = ini_sys:r_string_ex(sec, "hud")
	print_dbg("searching for "..idle_section.. " for weapon section "..hud)

	local bored_anim = hud and ini_sys:r_string_ex(hud, idle_section)
	if bored_anim then
		print_dbg("found bored anim "..bored_anim)
		local bored_sound = bored_anim and ini_sys:r_string_ex(sec, "snd_bore") or "$no_sound"
		play_anim(weapon, idle_section, bored_sound)
	end		
end

-- put down and bring back up
function unjam_simple(weapon)
	stop_jammin()
	local str = gc("ui_st_unjam")
	local id = weapon:id()
	local sec = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()
	local sound = get_sound(sec)
	db.actor:hide_weapon()

	unjam_in_progress = true
	CreateTimeEvent("arti_jamming", "unjam"..id, 0.1, 
	function(id, sound, message, verbosity)
		if not unjam_in_progress then
			print_dbg("unjam_replace_simple interrupted")
			db.actor:restore_weapon()
			return true
		end
		local current_weapon = db.actor:active_item()
		if current_weapon then return false end
		
		db.actor:restore_weapon()
		-- premature interrupt
		apply_unjam(id, sound, message, verbosity)
	
		return true
	end,
	id, sound, str, 1)
end

-- unjam held weapon with animation
function unjam_anim(weapon)
	stop_jammin()
	local str = gc("ui_st_unjam")
	local id = weapon:id()
	local sec = weapon:section()
	-- blindside compat, check for unjaminations and cache anim name and sound
	local unjam_anims = get_unjam_animation(weapon)
	if unjam_anims ~= nil then
		unjam_in_progress = true
		local to_search = utils_item.addon_attached(weapon ,"gl") and "anm_reload_misfire_w_gl" or "anm_reload_misfire"
		local unjam_sound = ini_sys:r_string_ex(sec, "snd_reload_misfire") or ini_sys:r_string_ex(sec, "snd_reload_1") or "$no_sound"
		print_dbg("found "..unjam_anims)
		length = play_anim(weapon, to_search, unjam_sound)
		CreateTimeEvent("arti_jamming", "restore", length/1000, apply_unjam, id)
	end

end

function unjam_super_simple(weapon)
	if weapon:get_ammo_in_magazine() > 1 then
		start_jammin(50)
		jam_swearing()
		send_msg(gc("ui_st_unjam_fail"), 0)
		weapon:switch_state(2)
	else
		unjam_simple(weapon)
	end
end

function unjam_super_anim(weapon)
	if weapon:get_ammo_in_magazine() > 1 then
		start_jammin(50)
		jam_swearing()
		send_msg(gc("ui_st_unjam_fail"), 0)
		weapon:switch_state(2)
	else
		unjam_anim(weapon)
	end
end


function determine_slot(weapon)
	for i=1,5 do 
		local item = db.actor:item_in_slot(i)
		local item_id = item and item:id() or 0
		if weapon:id() == item_id then return i end
	end
end

function unjam_and_clone(weapon, slot, sound)
	if not unjam_in_progress then
		print_dbg("unjam_replace_simple interrupted")
		db.actor:restore_weapon()
		return true
	end
	local current_weapon = db.actor:active_item()
	if current_weapon then return false end

	apply_unjam(weapon:id(), sound)
	local old_weapon = alife_object(weapon:id())
	local new_weapon = alife_clone_weapon(old_weapon)
	print_dbg("cloned weapon, doing restoration")
	CreateTimeEvent("arti_jamming", "move_to_slot", 0.1, 
		function(weapon, slot)
			print_dbg("unjam_replace_simple - restoring weapon to slot %s", slot)
			db.actor:restore_weapon()
			db.actor:move_to_slot(level.object_by_id(weapon), slot)
			return true
		end, 
	new_weapon.id, slot)
	return true
end

-- hide, clone, move
function unjam_replace_simple(weapon)
	if not weapon then return end
	local slot = determine_slot(weapon)
	local sound = get_sound(weapon:section())
	print_dbg("slot determined is %s", slot)
	unjam_in_progress = true
	db.actor:hide_weapon()
	print_dbg("replacing weapon %s", weapon:id())
	CreateTimeEvent("arti_jamming", "move "..weapon:id(), 0.1, unjam_and_clone, weapon, slot, sound)
	print_dbg("unjam replace returning")
	return true
end

-- just change the state to reloading and check when reloading is done
function unjam_replace_anim(weapon)
	weapon:switch_state(7)
	unjam_in_progress = true
	apply_unjam(weapon:id())
end

-- clear the entry, no qs asked
function inv_unjam(weapon)
	if jammed_guns[weapon:id()] == 3 then return end
	unjam_in_progress = true
	apply_unjam(weapon:id(), get_sound(weapon:section()))
end

function inv_unjam_replace(weapon)
	unjam_in_progress = true
	apply_unjam(weapon:id(), get_sound(weapon:section()))
	local slot = determine_slot(weapon)
	local old_weapon = alife_object(weapon:id())
	local new_weapon = alife_clone_weapon(old_weapon)
	if slot then
		CreateTimeEvent("arti_jamming", "move_to_slot", 0.1, 
			function(weapon, slot)
				print_dbg("unjam_replace_simple - restoring weapon to slot %s", slot)
				db.actor:restore_weapon()
				db.actor:move_to_slot(level.object_by_id(weapon), slot)
				return true
			end, 
		new_weapon.id, slot)
	end
end


-- conditions:
-- unjam type? ok (0), misfire/feed (just 1), doublefeed(3), classic (4)
-- currently held?
-- has animation?
-- these functions will be completely responsible for what happens
local unjam_router = {
	-- held or not
	["held"] = {
		[0] = {
			["anim"] = check_anim,
			["no_anim"] = check_simple
		},
		[1] = {
			["anim"] = unjam_anim,
			["no_anim"] = unjam_simple
		},
		[3] = {
			["anim"] = unjam_super_anim,
			["no_anim"] = unjam_super_simple
		},
		[4] = {
			["anim"] = unjam_replace_anim,
			["no_anim"] = unjam_replace_simple
		}
	},
	["inventory"] = {
		[1] = {
			["anim"] = inv_unjam,
			["no_anim"] = inv_unjam
		},
		[3] = {
			["anim"] = inv_unjam,
			["no_anim"] = inv_unjam
		},
		[4] = {
			["anim"] = inv_unjam_replace,
			["no_anim"] = inv_unjam_replace
		}
	}
}
-- Unjam works by clearing weapon ID from the jam table, if conditions are met.
function unjam(wpn)
	local weapon = wpn or db.actor:active_item()
	if not weapon then return end
	if unjam_in_progress then
		print_dbg("weapon already being unjammed")
		return
	end
	local id = weapon:id()
	local active_id = db.actor:active_item() and db.actor:active_item():id() or 0 
	local sec = weapon:section()

	if not weapon or not has_parts(weapon) then
		send_msg(gc("ui_st_nothing"), verbosity)
		return
	end

	if missing_parts(weapon) then
		send_msg(gc("ui_st_missing"), 0)
		return
	end

	local is_current = id == active_id and "held" or "inventory"

	local jam_level = jammed_guns[id] or 0
	if jam_level == 2 then jam_level = 1 end

	local has_anim = get_unjam_animation(weapon) and "anim" or "no_anim"

	print_dbg("unjam current: %s jam level: %s has_anims: %s. has function? %s", is_current, jam_level, has_anim, unjam_router[is_current][jam_level][has_anim] ~= nil)

	if unjam_router[is_current][jam_level][has_anim] then
		print_dbg("Executing unjam function")
		unjam_router[is_current][jam_level][has_anim](weapon)
	end
end


function get_unjam_animation(weapon)					
	local sec = weapon:section()
	local to_search = utils_item.addon_attached(weapon ,"gl") and "anm_reload_misfire_w_gl" or "anm_reload_misfire"
	local hud = ini_sys:r_string_ex(sec, "hud")
	print_dbg("searching for "..to_search.. " for weapon section "..hud)
	local unjam_anims = hud and ini_sys:r_string_ex(hud,to_search)
	return unjam_anims
end

-- SECTION callbacks --
local function on_item_drag_dropped(obj_1, obj_2, slot_from, slot_to)
	local part = obj_1 and obj_1:section() or nil
	local wpn = obj_2 and obj_2:section() or nil
	print_dbg("Dragging %s onto %s", part, wpn)
	if is_part(part) and has_parts(obj_2) then
		local sec  = wpn and ini_sys:r_string_ex(wpn,"parent_section") or wpn
		local parts = item_parts.get_parts_con(obj_2, nil, true)
		if parts and parts[part] then
			try_replace_part(obj_2, parts, obj_1, item_parts.get_suitable_dtool(obj_2))
		else
			news_manager.send_tip(db.actor, gc("st_news_parts_incompatible"), nil, "swiss_knife", 6000)
		end
	end
end

local disallowed = {
	[key_bindings.kINVENTORY] = true,
	[key_bindings.kWPN_RELOAD] = true,
	[key_bindings.kNIGHT_VISION] = true,
	[key_bindings.kWPN_NEXT] = true,
	[key_bindings.kWPN_1] = true,
	[key_bindings.kWPN_2] = true,
	[key_bindings.kWPN_3] = true,
	[key_bindings.kWPN_4] = true,
	[key_bindings.kWPN_5] = true,
	[key_bindings.kWPN_6] = true,

}
function on_key_press(key)
	-- certain actions interrupt any unjams in progress
	local bind = dik_to_bind(key)
	if unjam_in_progress and disallowed[bind]then
		print_dbg("unjam interrupted by action")
		unjam_in_progress = false
	end
end

function actor_on_weapon_jammed(actor)
	-- send_msg(gc("ui_st_oldjam"), 0)
	local wpn = db.actor:active_item()
	-- if magazines and magazine_binder.is_supported_weapon(wpn) then 
	-- 	send_msg(gc("ui_st_oldjam"), 0)
	-- 	return 
	-- end
	if not jammed_guns[wpn:id()] then
		jammed_guns[wpn:id()] = 4
	end
	print_dbg("Logged id %s, sec %s", wpn:id(), wpn:section())
	jam_swearing()
end

function actor_on_weapon_reload(wpn)
	if jammed_guns[wpn:id()] then
		if magazines and magazines.do_interrupt_reload then magazines.do_interrupt_reload() end
		-- drop mag if simplejam enabled and superjammed
		if get_config("simplejam") and jammed_guns[wpn:id()] == 2 then
			-- on simplejam, unload the magazine
			if mag_support.using_mags() and mag_support.is_mag_loaded(wpn) then
				mag_support.eject_mag(wpn)
			else
				wpn:force_unload_magazine(true)
			end
		end
		CreateTimeEvent("arti_jamming", "cancel_reload", 0.1, 
			function(wpn)		
				wpn:switch_state(2)
				return true
			end
		, wpn)
	end
end

-- SECTION damage reduction -- 
local function reduce_damage(npc, shit, bone_id, flags)
	-- skip if it wasnt a hit by the player
	if not (shit.draftsman and shit.draftsman:id() == 0) then 
		return 
	end

	-- skip if player has no weapon out, or weapon has no parts
	local weapon = db.actor:active_item()
	if not weapon or barrel_con == nil then
		return 
	end

	if barrel_con > 75 then
		return 
	else
		local ratio = (75 - barrel_con)/75
		shit.power = shit.power * (1 - (0.5 * ratio))
	end
end

function npc_on_before_hit(npc,shit,bone_id, flags)
	reduce_damage(npc, shit, bone_id, flags)
end
function monster_on_before_hit(monster,shit,bone_id, flags)
	reduce_damage(monster, shit, bone_id, flags)
end

-- SECTION field stripping and part replacement -- 
function try_replace_part(wpn, table, part, using_tool)
	local id = part:id()
	local sec = part:section()
	local pcon = part:condition()
	local wcon = wpn:condition()
	if is_barrel(sec) then
		news_manager.send_tip(db.actor, gc("st_news_parts_barrel"), nil, "swiss_knife", 6000)
	elseif (wpn:condition() < REPLACE_THRESHOLD) then
		news_manager.send_tip(db.actor, gc("st_news_parts_rusty"), nil, "swiss_knife", 6000)
	else
		print_dbg("Replacing %s", sec)
		local tmp = table[sec]
		table[sec] = math_floor(pcon * 100)
		if tmp == -1 then
			-- part missing, do not swap conditions
			alife_release_id(id)
		else
			part:set_condition(tmp/100)
		 end
		item_parts.set_parts_con(wpn:id(), table)
		if (wpn:id() == cgd.id) then
			cgd.parts[sec] = table[sec]
		end
		-- lose a little condition when replacing parts
		if wcon > 0.6 then
			local range = using_tool and 3 or 13
			wpn:set_condition(wcon - (math_random(3, 3 + range)/100)) 
		end
		if mag_support.using_mags() and mag_support.is_mag_loaded(wpn) then 
			mag_support.eject_mag(wpn)
		else
			wpn:force_unload_magazine(true)
		end

		news_manager.send_tip(db.actor, gc("st_news_parts_success") .. " " .. ui_item.get_sec_name(sec), nil, "swiss_knife", 6000)
	end
end

EvaluateParts = item_parts.evaluate_parts

function item_parts.evaluate_parts(obj)
    local sec = obj:section()
	sec = ini_sys:r_string_ex(sec,"parent_section") or sec -- for weapons with scopes
	local id = obj:id()
	local m_con = math.ceil(obj:condition() * 100) -- default condition of the item
	
	local parts = ini_parts:r_string_ex("con_parts_list",sec)
	if parts then
		parts = str_explode(parts,",")
		
		local data = se_load_var(id, obj:name(), "parts")

		-- Savegame compatibility. Recalculate with changed parts
		if data and data[sec] then
			for i=1,#parts do
				if (not data[parts[i]]) then
					empty_table(data)
					break
				end
			end
		end
		-- premature terminate if data exists for outfits
		if has_parts(obj) and data then return
        else
            EvaluateParts(obj)
		end
    end
end

function on_game_start()
	local sounds = {"ak", "ar", "handgun", "shotgun", "bolt"}
	local ini_sounds = ini_file("items\\settings\\arti_unjam_sounds.ltx")
	for i=1,#sounds do
		local section = utils_data.collect_section(ini_sounds, sounds[i])
		for k,v in pairs(section) do
			gun_sounds[v] = sounds[i]
		end
	end
	local ini_overheat = ini_file("items\\settings\\overheat.ltx")
	overheat_data.base = ini_overheat:r_float_ex("overheat", "base_threshold") or 50
	overheat_data.suppressor_mult = ini_overheat:r_float_ex("overheat", "suppressed_mult") or 0.6
	overheat_data.damage = {}
	overheat_data.damage[1] = ini_overheat:r_float_ex("overheat", "heat_1") or 1.2
	overheat_data.damage[2] = ini_overheat:r_float_ex("overheat", "heat_2") or 2.5
	overheat_data.damage[3] = ini_overheat:r_float_ex("overheat", "heat_3") or 4
	overheat_data.custom = {}
	local n_custom = ini_overheat:line_count("custom_overheat") or 0

	for i=0, n_custom-1 do
		local result, sec, value = ini_overheat:r_line("custom_overheat" , i , "", "")
		print_dbg("storing %s, %s", sec,value)

		overheat_data.custom[sec] = value
	end

	-- add custom functors
	custom_functor_autoinject.add_functor("arti_unjam", check_unjam, string_unjam, nil, unjam, false)

	RegisterScriptCallback("on_key_press",on_key_press)
    RegisterScriptCallback("ActorMenu_on_item_drag_drop",on_item_drag_dropped)
    RegisterScriptCallback("actor_on_weapon_jammed",actor_on_weapon_jammed)
	RegisterScriptCallback("actor_on_weapon_before_fire",actor_on_weapon_before_fire)
	RegisterScriptCallback("actor_on_weapon_fired",actor_on_weapon_fired)
	RegisterScriptCallback("actor_on_weapon_reload",actor_on_weapon_reload)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("npc_on_before_hit",npc_on_before_hit)
	RegisterScriptCallback("monster_on_before_hit",monster_on_before_hit)
	

end