-- temp condition for trade
local temp_con = {}
local parts_list = {
    s = { -- sidearm

    },
    l = { -- longarm

    }
}
local trade_config = {
    
}
has_parts = arti_jamming.has_parts
-- Prevent weapons with damaged/deformed parts from selling by temp setting condition to 0.
local function on_trade_opened()
	local function check_parts(temp, wpn)
		-- print_dbg("Evaluating item %s", wpn:id())
		if has_parts(wpn) then
			local parts = item_parts.get_parts_con(wpn, nil, true)
			for k,v in pairs(parts) do
				local minpart = arti_jamming_mcm.get_config("minpart") or 51
				if is_part(k) and v <= minpart then
					print_dbg("Weapon %s (%s) has low quality part. Blacklisting for sale.", wpn:section(), wpn:id())
					temp_con[wpn:id()] = wpn:condition()
					wpn:set_condition(0)
					break
				end
			end
		end
	end
	db.actor:iterate_inventory(check_parts,nil)
	
	local wpn1 = db.actor:item_in_slot(1)
	if wpn1 and (not temp_con[wpn1:id()]) then
		check_parts(nil, wpn1)
	end
	
	local wpn2 = db.actor:item_in_slot(2)
	if wpn2 and (not temp_con[wpn2:id()]) then
		check_parts(nil, wpn2)
	end
	
	local wpn3 = db.actor:item_in_slot(3)
	if wpn3 and (not temp_con[wpn3:id()]) then
		check_parts(nil, wpn3)
	end
end

local function on_trade_closed()
	for k,v in pairs(temp_con) do
		local obj = level.object_by_id(k)
		if obj then
			local p = obj:parent()
			if (p and p:id() == AC_ID) then
				alife_process_item(obj:section(),k, {cond = v})
			end
		end
	end
	temp_con = empty_table(temp_con)
end

function on_game_start()
    
    local parts_list = ini_file("items\\settings\\part_prices.ltx")
	local part_section = utils_data.collect_section(parts_list, "wpo_part_prices")
	local n = parts_list:line_count("wpo_part_prices") or 0

	for i=0, n-1 do
		local result, sec, value = parts_list:r_line("wpo_part_prices" , i , "", "")
        if string.find(sec, "_p_") then
            parts_list.s[#parts_list.s] = sec
        else
            parts_list.l[#parts_list.l] = sec
        end
	end
	RegisterScriptCallback("ActorMenu_on_trade_started",on_trade_opened)
	RegisterScriptCallback("ActorMenu_on_trade_closed",on_trade_closed)
end